---
title: "Project Overview"
---

## Introduction

**TL;DR**: *Identify a business process that can be enhanced through generative AI agents, design and implement a Python-based solution using modern AI frameworks and frontend technologies, and demonstrate its business impact.*

The goal of this project is to develop a generative AI solution that leverages agent-based systems to automate operational business tasks. You will apply concepts and technologies covered in our course to create a functional prototype that demonstrates integration with business processes and provides measurable improvements in efficiency or quality.

Your project should utilize Python as the primary programming language and incorporate frameworks from leading AI providers (OpenAI, Anthropic, or HuggingFace) along with modern frontend solutions (Gradio, Streamlit, or NextJS). All components of your project **must be reproducible** and should be included in your GitHub repository, with the exception of the final presentation.

## Project Phases

### 1. Use Case Identification (Weeks 1-2)

Begin by identifying three potential business use cases where generative AI agents could provide significant value. Evaluate each option based on:

- Business relevance and potential impact
- Technical feasibility within the course timeframe
- Availability of necessary data and resources
- Alignment with course concepts

Submit a brief analysis (1-2 pages) of your three ideas with justification for each. We will discuss the options and select one use case to pursue.

### 2. Business Context Development (Weeks 2-3)

Once your use case is approved, develop a comprehensive business context presentation using [Google Slides](https://www.google.com/intl/en_en/slides/about/) with an appropriate [business template](https://slidesgo.com/themes). Your 10-minute presentation should include:

- Business Model Canvas for the organization
- Value Proposition Canvas for the AI solution
- User Personas for primary stakeholders/users
- Specific KPIs that will measure success

### 3. Agent System Design (Weeks 4-5)

Design your generative AI agent system, focusing on:

- Agent architecture (perception, reasoning, action, learning components)
- LLM selection strategy with justification (OpenAI, Anthropic, or HuggingFace)
- Prompt engineering approach
- Integration points with existing business processes
- Data flow and system boundaries
- Security and ethical considerations

Submit a design document (3-5 pages) and architecture diagram for feedback before proceeding to implementation.

### 4. Technical Implementation (Weeks 6-9)

Implement your generative AI agent system following these guidelines:

- Develop in Python with modular, well-documented code
- Implement using selected AI frameworks (OpenAI, Anthropic, or HuggingFace)
- Create an intuitive user interface using one of the specified frontend solutions
- Include comprehensive error handling and robustness measures
- Establish integration points with business processes
- Implement metrics tracking for performance evaluation
- Set up a GitHub repository with clear documentation

Weekly code reviews will be conducted to provide feedback and guidance.

### 5. Testing and Evaluation (Weeks 10-11)

Thoroughly test your system and evaluate its performance:

- Conduct functional testing across various scenarios
- Measure performance against established KPIs
- Document limitations and edge cases
- Gather feedback from potential users
- Quantify business impact (time savings, quality improvements, etc.)
- Identify potential improvements and future enhancements

Submit a testing report (2-3 pages) documenting your findings.

### 6. Final Documentation and Presentation (Weeks 12-13)

Prepare comprehensive documentation and a final presentation:

- Complete technical documentation including:
  - System architecture
  - Implementation details
  - User manual
  - Installation and setup instructions
  - API documentation (if applicable)
  - Future enhancement roadmap
  
- Deliver a 15-minute final presentation that:
  - Explains the business use case and value proposition
  - Demonstrates the working prototype
  - Presents evaluation results and impact metrics
  - Discusses challenges and lessons learned
  - Outlines potential future developments

## Technical Requirements

Your project must include:

1. **Python-based implementation** with clean, well-documented code
2. **Integration of at least one LLM** from OpenAI, Anthropic, or HuggingFace
3. **Agent-based architecture** for task automation
4. **User interface** built with Gradio, Streamlit, or NextJS
5. **Business process integration** points
6. **Metrics tracking** for performance evaluation
7. **Comprehensive documentation** in the GitHub repository
8. **Reproducible setup** that can be deployed by others

## Evaluation

Your project will be evaluated according to the grading criteria provided separately, which includes assessment of:

- Business use case definition
- Generative AI system design
- Technical implementation
- User interface implementation
- Business process integration
- Documentation and presentation


### Grade

The final course grade will be calculated based on the following criteria:

| Criteria & Sub-Criteria                                      | Exceptional      | Proficient       | Basic            | Needs Improvement |
|--------------------------------------------------------------|------------------|------------------|------------------|-------------------|
| **Business Use Case Definition**                             |                  |                  |                  |                   |
| 1. Problem Identification and Business Relevance             | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| 2. Scope Definition and Expected Business Impact             | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| **Generative AI System Design**                              |                  |                  |                  |                   |
| 3. Agent Architecture Design                                 | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| 4. LLM Selection and Integration Strategy                    | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| **Technical Implementation**                                 |                  |                  |                  |                   |
| 5. Python Code Quality and Structure                         | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| 6. Framework Selection and Implementation (OpenAI/Anthropic/HuggingFace) | 8-10 points | 5-7 points | 3-4 points | 0-2 points |
| 7. Error Handling and Robustness                             | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| **User Interface Implementation**                            |                  |                  |                  |                   |
| 8. Frontend Solution Quality (Gradio/Streamlit/NextJS)       | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| 9. User Experience and Interaction Design                    | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| **Business Process Integration**                             |                  |                  |                  |                   |
| 10. Integration with Existing Business Processes             | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| 11. Efficiency and Quality Improvement Metrics               | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| **Documentation and Presentation**                           |                  |                  |                  |                   |
| 12. Technical Documentation and System Architecture          | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |
| 13. Project Presentation and Demonstration                   | 6-8 points       | 4-5 points       | 2-3 points       | 0-1 points        |


### Detailed Evaluation Criteria

#### Business Use Case Definition
- **Problem Identification and Business Relevance**: Identification of a meaningful business problem solvable through generative AI agents. Evaluation of the problem's significance and impact on business operations.
- **Scope Definition and Expected Business Impact**: Clear definition of project boundaries, feasibility analysis, and projected business value (e.g., time savings, quality improvements, cost reduction).

#### Generative AI System Design
- **Agent Architecture Design**: Architecture design that demonstrates understanding of agent-based systems, including components for perception, reasoning, action, and learning.
- **LLM Selection and Integration Strategy**: Appropriate selection of LLM(s) (OpenAI, Anthropic, HuggingFace) with justification, prompt engineering strategy, and integration approach.

#### Technical Implementation
- **Python Code Quality and Structure**: Quality of Python implementation, including code organization, readability, best practices, and modularity.
- **Framework Selection and Implementation**: Effective use of chosen AI frameworks, proper implementation of generative AI capabilities, and customization for the specific use case.
- **Error Handling and Robustness**: Implementation of comprehensive error handling, edge case management, and system reliability features.

#### User Interface Implementation
- **Frontend Solution Quality**: Implementation quality of the chosen frontend solution (Gradio, Streamlit, or NextJS), including code structure and technical correctness.
- **User Experience and Interaction Design**: Usability, intuitiveness, and appropriateness of the interface for the target users and business context.

#### Business Process Integration
- **Integration with Existing Business Processes**: Strategy and implementation for integrating the solution with existing business workflows, systems, or databases.
- **Efficiency and Quality Improvement Metrics**: Definition and measurement of KPIs demonstrating system impact on operational efficiency and output quality.

#### Documentation and Presentation
- **Technical Documentation and System Architecture**: Comprehensive documentation of system architecture, components, implementation decisions, and potential future improvements.
- **Project Presentation and Demonstration**: Clarity, professionalism, and effectiveness in presenting the solution, including live demonstration of functionality.

### Achievement Levels

Total Points: 100
- **Exceptional**: 80-100 points
- **Proficient**: 65-79 points
- **Basic**: 50-64 points
- **Needs Improvement**: 0-49 points

#### Exceptional (80-100%)
Solution demonstrates outstanding mastery of generative AI agent implementation, innovative application to business problems, professional-grade implementation, and quantifiable business impact.

#### Proficient (60-79%)
Solution shows solid understanding of generative AI concepts, competent implementation of agent-based system, good business integration, and clear potential for business improvement.

#### Basic (40-59%)
Solution implements fundamental generative AI capabilities with functional but limited agent capabilities, basic business application, and minimal integration with business processes.

### Needs Improvement (0-39%)
Solution has significant gaps in implementation, limited AI agent functionality, poor business relevance, or inadequate technical quality.



### Final Grade Conversion

|  Grade       | Final Course Grade |
|--------------|--------------------|
| 1.0          | 96 - 100           |
| 1.3          | 91 - 95            |
| 1.7          | 85 - 90            |
| 2.0          | 80 - 84            |
| 2.3          | 75 - 79            |
| 2.7          | 70 - 74            |
| 3.0          | 65 - 69            |
| 3.3          | 60 - 64            |
| 3.7          | 55 - 59            |
| 4.0          | 50 - 54            |
| 4.7          | 15 - 49            |
| 5.0          | 0 - 14             |




## Resources

- Course materials and lecture notes
- [OpenAI API Documentation](https://platform.openai.com/docs/api-reference)
- [Anthropic Claude API Documentation](https://docs.anthropic.com/claude/reference/getting-started-with-the-api)
- [HuggingFace Transformers Documentation](https://huggingface.co/docs/transformers/index)
- [Streamlit Documentation](https://docs.streamlit.io/)
- [Gradio Documentation](https://www.gradio.app/docs/)
- [NextJS Documentation](https://nextjs.org/docs)
- Additional resources will be shared throughout the course